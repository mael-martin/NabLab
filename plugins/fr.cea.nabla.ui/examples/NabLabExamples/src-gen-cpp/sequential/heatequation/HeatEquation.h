/* DO NOT EDIT THIS FILE - it is machine generated */

#ifndef __HEATEQUATION_H_
#define __HEATEQUATION_H_

#include <fstream>
#include <iomanip>
#include <type_traits>
#include <limits>
#include <utility>
#include <cmath>
#include <leveldb/db.h>
#include <leveldb/write_batch.h>
#include "nablalib/mesh/CartesianMesh2DFactory.h"
#include "nablalib/mesh/CartesianMesh2D.h"
#include "nablalib/utils/Utils.h"
#include "nablalib/utils/Timer.h"
#include "nablalib/types/Types.h"
#include "nablalib/utils/Serializer.h"
#include "nablalib/mesh/PvdFileWriter2D.h"

using namespace nablalib::mesh;
using namespace nablalib::utils;
using namespace nablalib::types;
using namespace nablalib::utils::stl;

/******************** Free functions declarations ********************/

namespace heatequationfreefuncs
{
double det(RealArray1D<2> a, RealArray1D<2> b);
template<size_t x>
double norm(RealArray1D<x> a);
template<size_t x>
double dot(RealArray1D<x> a, RealArray1D<x> b);
template<size_t x>
RealArray1D<x> sumR1(RealArray1D<x> a, RealArray1D<x> b);
double sumR0(double a, double b);
}

/******************** Module declaration ********************/

class HeatEquation
{
	/* Don't move this object around */
	HeatEquation(HeatEquation &&)           = delete;
	HeatEquation(const HeatEquation &)      = delete;
	HeatEquation& operator=(HeatEquation &) = delete;

public:
	struct Options
	{
		double stopTime;
		int maxIterations;
		double PI;
		double alpha;
		std::string nonRegression;

		void jsonInit(const char* jsonContent);
	};

	HeatEquation(CartesianMesh2D* aMesh, Options& aOptions);
	~HeatEquation();

	void simulate();
	void computeOutgoingFlux() noexcept;
	void computeSurface() noexcept;
	void computeTn() noexcept;
	void computeV() noexcept;
	void iniCenter() noexcept;
	void iniF() noexcept;
	void iniTime() noexcept;
	void computeUn() noexcept;
	void iniUn() noexcept;
	void setUpTimeLoopN() noexcept;
	void executeTimeLoopN() noexcept;
	void createDB(const std::string& db_name);

private:
	// Mesh and mesh variables
	CartesianMesh2D* mesh;
	size_t __attribute__((unused))nbNodes, nbCells, nbFaces, nbNeighbourCells, nbNodesOfFace, nbNodesOfCell;

	// User options
	Options& options;

	// Timers
	Timer globalTimer;
	Timer cpuTimer;
	Timer ioTimer;

public:
	// Global variables
	int n;
	static constexpr double deltat = 0.001;
	double t_n;
	double t_nplus1;
	double t_n0;
	std::vector<RealArray1D<2>> X;
	std::vector<RealArray1D<2>> center;
	std::vector<double> u_n;
	std::vector<double> u_nplus1;
	std::vector<double> V;
	std::vector<double> f;
	std::vector<double> outgoingFlux;
	std::vector<double> surface;
};

#endif
